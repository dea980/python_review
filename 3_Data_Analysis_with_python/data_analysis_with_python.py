# -*- coding: utf-8 -*-
"""Data_Analysis_with_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jyHJFTIHwuRQIL9M1X97Zmi97fOF6EEe

### **과제  수행을 위한 데이터 다운로드**

[관서별 5대범죄 발생 및 검거.xlsx]

[pop_kor.csv]

- district_crime : 관서별 5대범죄 발생 및 검거 data
- population_data : 서울 district 별 인구수 data

### Agenda

1. Find out current downloaded data and load
2. Import the python library and preprocess the data
3. Extract the data that required

## 1. Load the data **Use Pandas and NumPy**.
"""

import pandas as pd

## First need to upload the data file
## Crime data in excel form
## Notice: file directory, or link ...! Currently I don't get any access to it.
district_crime = pd.read_excel('/content/관서별 5대범죄 발생 및 검거.xlsx')
district_crime

# ## District Population in csv
# Load the population data and set the index to '구별'
population_data = pd.read_csv('/content/pop_kor.csv', index_col='구별')

# Display the population data
population_data.head()

## check head
district_crime.head(5)

## check head
population_data.head(5)

## checking the datatype of the dataframe
district_crime.info()

## checking the datatype of the dataframe
population_data.info()

district_crime.describe()

population_data.describe()

## checking the number of missing values
district_crime.isnull().sum()

## checking the number of missing values
population_data.isnull().sum()

# Define the mapping
서울구별 = {
    '서대문서': '서대문구',
    '수서서': '강남구',
    '강서서': '강서구',
    '서초서': '서초구',
    '서부서': '은평구',
    '중부서': '중구',
    '종로서': '종로구',
    '남대문서': '중구',
    '혜화서': '종로구',
    '용산서': '용산구',
    '성북서': '성북구',
    '동대문서': '동대문구',
    '마포서': '마포구',
    '영등포서': '영등포구',
    '성동서': '성동구',
    '동작서': '동작구',
    '광진서': '광진구',
    '강북서': '강북구',
    '금천서': '금천구',
    '중랑서': '중랑구',
    '강남서': '강남구',
    '관악서': '관악구',
    '강동서': '강동구',
    '종암서': '성북구',
    '구로서': '구로구',
    '양천서': '양천구',
    '송파서': '송파구',
    '노원서': '노원구',
    '방배서': '서초구',
    '은평서': '은평구',
    '도봉서': '도봉구'
}

# Map '관서명' to '구별' with default value '구 없음'
district_crime['구별'] = district_crime['관서명'].map(서울구별).fillna('구 없음')
# print(pop_kor.head())
district_crime.head()

## find the number of '구 없음'
# Assuming `district_crime` is your DataFrame
gu_none_count = district_crime['구별'].value_counts().get('구 없음', 0)  # Returns 0 if '구 없음' doesn't exist

f"Number of '구 없음': {gu_none_count}구 존재."

### check names
district_crime['관서명']

# Aggregate data by district
pivoted_data = pd.pivot_table(district_crime, index='구별', aggfunc='sum')

# Drop the row for '구 없음'
pivoted_data = pivoted_data.drop('구 없음', errors='ignore')
pivoted_data.head()

## Merge with population data
## inner join
merged_data = pivoted_data.join(population_data, how='inner')
merged_data.head()

# Calculate arrest rates
pivoted_data['강간검거율'] = (pivoted_data['강간(검거)'] / pivoted_data['강간(발생)']) * 100
pivoted_data['강도검거율'] = (pivoted_data['강도(검거)'] / pivoted_data['강도(발생)']) * 100
pivoted_data['살인검거율'] = (pivoted_data['살인(검거)'] / pivoted_data['살인(발생)']) * 100
pivoted_data['절도검거율'] = (pivoted_data['절도(검거)'] / pivoted_data['절도(발생)']) * 100
pivoted_data['폭력검거율'] = (pivoted_data['폭력(검거)'] / pivoted_data['폭력(발생)']) * 100

# Calculate overall arrest rate
pivoted_data['검거율'] = (
    (pivoted_data['강간(검거)'] + pivoted_data['강도(검거)'] +
     pivoted_data['살인(검거)'] + pivoted_data['절도(검거)'] +
     pivoted_data['폭력(검거)']) /
    (pivoted_data['강간(발생)'] + pivoted_data['강도(발생)'] +
     pivoted_data['살인(발생)'] + pivoted_data['절도(발생)'] +
     pivoted_data['폭력(발생)'])
) * 100

## ascending by 검거율
pivoted_data = pivoted_data.sort_values(by='검거율', ascending=True)
pivoted_data.head()

# Delete unnecessary columns
del pivoted_data['강간(검거)']
del pivoted_data['강도(검거)']
del pivoted_data['살인(검거)']
del pivoted_data['절도(검거)']
del pivoted_data['폭력(검거)']
del pivoted_data['소계(검거)']
del pivoted_data['소계(발생)']

pivoted_data.head()

# Rename columns
pivoted_data.rename(columns={
    '강간(발생)': '강간',
    '강도(발생)': '강도',
    '살인(발생)': '살인',
    '절도(발생)': '절도',
    '폭력(발생)': '폭력'
}, inplace=True)

pivoted_data.head()